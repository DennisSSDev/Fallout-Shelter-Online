
// -- user code here --

/* --- start generated code --- */

// Generated by  1.5.2 (Phaser v2.6.2)


class Room_Creator extends Phaser.Sprite {
	/**
	 * Room_Creator
	 * @param {Phaser.Game} aGame A reference to the currently running game.
	 * @param {Number} aX The x coordinate (in world space) to position the Sprite at.
	 * @param {Number} aY The y coordinate (in world space) to position the Sprite at.
	 * @param {any} aKey This is the image or texture used by the Sprite during rendering. It can be a string which is a reference to the Cache entry, or an instance of a RenderTexture or PIXI.Texture.
	 * @param {any} aFrame If this Sprite is using part of a sprite sheet or texture atlas you can specify the exact frame to use by giving a string or numeric index.
	 */
	constructor(aGame, aX, aY, aKey, aFrame, obj_creator) {
		super(aGame, aX, aY, aKey || 'share2', aFrame  == undefined || aFrame == null? null : aFrame);
		this.scale.setTo(0.75, 0.75);
		this.obj_creator =  obj_creator;
		this.inputEnabled = true;
		this.assigned_key = aKey;
		this.events.onInputOver.add(this.addTint, this);
		this.events.onInputOut.add(this.removeTint, this); 
		this.events.onInputUp.add(this.construct, this);
		this.room_type = null;
		this.stat = 0;//will be populated by based on creations for increasing the stats of the game
	}
	
	/* sprite-methods-begin */
	// -- user code here --
	
	addTint(){
		this.tint += 0x00ff00;
	}
	removeTint(){
		this.tint = 0xffffff;
	}
	construct(){
		if(this.assigned_key == "shoppingBasket"){
			//upgrade the parent;
		}
		else if(this.assigned_key == "cross"){
			this.room_type = new Creator_HoverWindow(this.game, this.obj_creator.x, this.obj_creator.y);
			this.game.add.existing(this.room_type);
			this.selfDestruct();
		}
		else if(this.assigned_key == "home"){
			//build new home and destroy the parent;
			this.room_type = new room(this.game, this.obj_creator.x, this.obj_creator.y, "housing_room");
			this.game.add.existing(this.room_type);
			this.bringCharToFront();
			this.selfDestruct();
		}
		else if(this.assigned_key == "power"){
			//build new home and destroy the parent
			this.room_type = new room(this.game, this.obj_creator.x, this.obj_creator.y, "energy_room");
			this.game.add.existing(this.room_type);
			this.bringCharToFront();
			this.selfDestruct();
		}
		else{
			console.log("was unable to construct a room");
		}
		
		
	}
	
	selfDestruct(){
		if(this.assigned_key == "power" || this.assigned_key == "cross")
			this.obj_creator.option_1.destroy();
		else
			this.obj_creator.option_2.destroy();
		
		this.obj_creator.destroy();
		this.destroy();
	}
	
	bringCharToFront(){
		this.game.AI_MANAGER.aliveCitizens.forEach(c => this.game.world.bringToTop(c));
		this.game.AI_MANAGER.aliveEnemies.forEach(c => this.game.world.bringToTop(c));
	}
	/* sprite-methods-end */
}
/* --- end generated code --- */
// -- user code here --
