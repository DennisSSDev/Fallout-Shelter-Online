
// -- user code here --

/* --- start generated code --- */

// Generated by  1.5.2 (Phaser v2.6.2)


class Room_Creator extends Phaser.Sprite {
	/**
	 * Room_Creator
	 * @param {Phaser.Game} aGame A reference to the currently running game.
	 * @param {Number} aX The x coordinate (in world space) to position the Sprite at.
	 * @param {Number} aY The y coordinate (in world space) to position the Sprite at.
	 * @param {any} aKey This is the image or texture used by the Sprite during rendering. It can be a string which is a reference to the Cache entry, or an instance of a RenderTexture or PIXI.Texture.
	 * @param {any} aFrame If this Sprite is using part of a sprite sheet or texture atlas you can specify the exact frame to use by giving a string or numeric index.
	 */
	constructor(aGame, aX, aY, aKey, aFrame, obj_creator) {
		super(aGame, aX, aY, aKey || 'share2', aFrame  == undefined || aFrame == null? null : aFrame);
		this.scale.setTo(0.75, 0.75);
		this.obj_creator =  obj_creator;
		this.inputEnabled = true;
		this.assigned_key = aKey;
		this.events.onInputOver.add(this.addTint, this);
		this.events.onInputOut.add(this.removeTint, this); 
		this.events.onInputUp.add(this.construct, this);
		this.room_type = null;
		this.stat = 0;//will be populated by based on creations for increasing the stats of the game
		this.onClickSound = this.game.add.audio("build");
		this.onClickSound_upgrade = this.game.add.audio("upgrade");
		if(this.game.latest_room === undefined){
			this.game.latest_room = null;
		}
		this.emitter = game.add.emitter(0, 0, 120);
		this.emitter.makeParticles('blackSmoke00');
		this.emitter.gravity = 400;
		this.emitter.minParticleScale = .2;
	    this.emitter.maxParticleScale = .4;
	}
	
	/* sprite-methods-begin */
	// -- user code here --
	
	addTint(){
		this.tint += 0x00ff00;
	}
	removeTint(){
		this.tint = 0xffffff;
	}
	construct(){
		if(this.assigned_key == "shoppingBasket"){
			//upgrade the parent;
			if(this.allowConstruct(this.game.resource_bar, .05)){
				this.game.resource_bar.depleteBar(.2);
				this.onClickSound_upgrade.play();
				this.obj_creator.upgrade();
				this.emitter.x = this.obj_creator.x + 100;
				this.emitter.y = this.obj_creator.y + 50;
				this.emitter.start(true, 3000, null, 10);
				this.emitter.particleBringToTop = true; 
			}
		}
		else if(this.assigned_key == "cross"){
			this.onClickSound_upgrade.play();
			this.room_type = new Creator_HoverWindow(this.game, this.obj_creator.x, this.obj_creator.y);
			this.game.add.existing(this.room_type);
			this.game.resource_bar.increaseBar(.05);
			if(this.obj_creator != null || this.obj_creator != undefined){
				let res_index = this.game.all_rooms.indexOf(this.obj_creator);
				this.game.all_rooms.splice(res_index, 1);
			}
			this.selfDestruct();
		}
		else if(this.assigned_key == "home"){
			//build new home and destroy the parent;
			if(this.allowConstruct(this.game.resource_bar, .05)){
				this.onClickSound.play();
				this.room_type = new room(this.game, this.obj_creator.x, this.obj_creator.y, "housing_room");
				this.game.add.existing(this.room_type);
				this.bringCharToFront();
				this.game.latest_room = this.room_type;
				this.game.all_rooms.push(this.room_type);
				this.game.resource_bar.depleteBar(.25);
				this.emitter.x = this.obj_creator.x + 100;
				this.emitter.y = this.obj_creator.y + 50;
				this.emitter.particleBringToTop = true; 
				this.emitter.start(true, 3000, null, 10);
				this.game.world.bringToTop(this.emitter);
				this.selfDestruct();
			}
		}
		else if(this.assigned_key == "power"){
			//build new home and destroy the parent
			if(this.allowConstruct(this.game.resource_bar, .05)){
				this.onClickSound.play();
				this.room_type = new room(this.game, this.obj_creator.x, this.obj_creator.y, "energy_room");
				this.game.add.existing(this.room_type);
				this.game.latest_room = this.room_type;
				this.game.all_rooms.push(this.room_type);
				this.bringCharToFront();
				this.game.resource_bar.depleteBar(.27);// cost is a bit higher than housing
				this.emitter.x = this.obj_creator.x + 100;
				this.emitter.y = this.obj_creator.y + 50;
				this.emitter.particleBringToTop = true; 
				this.emitter.start(true, 3000, null, 10);
				//this.emitter.particleBringToTop = true; 
				this.game.world.bringToTop(this.emitter);
				this.selfDestruct();
			}
		}
		else{
			console.log("was unable to construct a room");
		}
	}
	
	selfDestruct(){
		if(this.assigned_key == "power" || this.assigned_key == "cross")
			this.obj_creator.option_1.destroy();
		else
			this.obj_creator.option_2.destroy();
	
		this.obj_creator.destroy();
		this.destroy();
	}
	
	allowConstruct(bar, amount){
		if(bar.status - amount < 0)
			return false;
		else
			return true;
	}
	
	bringCharToFront(){
		this.game.AI_MANAGER.aliveCitizens.forEach(c => this.game.world.bringToTop(c));
		this.game.AI_MANAGER.aliveEnemies.forEach(c => this.game.world.bringToTop(c));
	}
}

